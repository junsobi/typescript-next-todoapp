import { act } from 'react-dom/test-utils';
import {
  render,
  fireEvent,
  screen,
  waitFor,
  within,
} from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import { TasksProvider } from '@/context/TasksContext';
import App from '@/pages/index';

// - **Scenario 5: Ïú†Ï†ÄÍ∞Ä TaskÎ•º ÏÇ≠Ï†úÌïúÎã§**
// - given: Î¶¨Ïä§Ìä∏Ïóê TaskÍ∞Ä ÏûàÏùÑ Îïå
//   - when: Ìï¥ÎãπÌïòÎäî Task Ïö∞Ï∏° ÏÇ≠Ï†ú Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥
//     - then: TaskÍ∞Ä ÏÇ≠Ï†úÎêòÍ≥†, Î¶¨Ïä§Ìä∏ÏóêÏÑú ÏóÜÏñ¥ÏßÑÎã§

describe('ÏãúÎÇòÎ¶¨Ïò§ 5 : Ïú†Ï†ÄÍ∞Ä TaskÎ•º ÏÇ≠Ï†úÌïúÎã§', () => {
  test('Î¶¨Ïä§Ìä∏Ïóê TaskÍ∞Ä ÏûàÏùÑ Îïå, Ìï¥ÎãπÌïòÎäî Task Ïö∞Ï∏° ÏÇ≠Ï†ú Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥, TaskÍ∞Ä ÏÇ≠Ï†úÎêòÍ≥†, Î¶¨Ïä§Ìä∏ÏóêÏÑú ÏóÜÏñ¥ÏßÑÎã§', async () => {
    render(
      <TasksProvider>
        <App />
      </TasksProvider>,
    );

    const input = screen.getByPlaceholderText('Ìï¥ÏïºÌï†Ïùº...');
    fireEvent.change(input, { target: { value: 'ÏÇ≠Ï†úÌï†Ïùº' } });
    const addButton = screen.getByText('+');
    act(() => {
      fireEvent.click(addButton);
    });

    await waitFor(() => {
      const taskItem = screen.getByText('ÏÇ≠Ï†úÌï†Ïùº');
      expect(taskItem).toBeInTheDocument();
    });

    const incompletedSection = screen.getByTestId('Incompleted-section');

    const deleteButtons = within(incompletedSection).getAllByText('üóëÔ∏è');
    const lastDeleteButton = deleteButtons[deleteButtons.length - 1];

    act(() => {
      fireEvent.click(lastDeleteButton);
    });

    await waitFor(() => {
      const taskItem = screen.queryByText('ÏÇ≠Ï†úÌï†Ïùº');
      expect(taskItem).not.toBeInTheDocument();
    });
  });
});
